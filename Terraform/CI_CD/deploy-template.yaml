parameters:
- name: stageName
  type: string
- name: stackName
  type: string
- name: parametersFile
  type: string
- name: feedName
  type: string
- name: failureMessage
  type: string

jobs:
- job: CheckoutAndCreateInfrastructure
  displayName: 'Checkout and Create Infrastructure for $(stageName)'
  steps:
  - checkout: self # Checkout the code
  - script: |
      echo "Initializing Terraform for $(stageName)..."
      cd Infrastructure
      terraform init
    displayName: 'Initialize Terraform for $(stageName)'

  - script: |
      echo "Applying Terraform to create infrastructure for $(stageName)..."
      terraform apply -var-file=terraform_vars/$(parametersFile) -auto-approve
    displayName: 'Apply Terraform for $(stageName)'

  - script: |
      echo "Fetching EC2 instance IP address from Terraform outputs..."
      EC2_IP=$(terraform output -raw ec2_instance_public_ip)
      echo "##vso[task.setvariable variable=EC2_IP]$EC2_IP"
    displayName: 'Get EC2 IP Address from Terraform'

  - task: DownloadSecureFile@1
    name: downloadPemFile
    inputs:
      secureFile: '$(PEM_FILE_PATH)' # Name of the PEM file in Secure Files

  - script: |
      echo "Deploying to $(stageName) Environment..."
      chmod 400 $(downloadPemFile.secureFilePath)
      mkdir -p ~/artifacts && cd ~/artifacts
      echo "Downloading opensupports artifact..."
      az artifacts universal download --name opensupports --version 1.0.0 --path . --feed $(feedName)
      echo "Deploying to EC2 instance..."
      scp -i $(downloadPemFile.secureFilePath) -r * ec2-user@$(EC2_IP):/path/to/deployment/directory
    displayName: 'Deploy to $(stageName)'

  - script: |
      echo "Sending failure notification if the job fails..."
      aws sns publish --topic-arn $(SNS_TOPIC_ARN) --message "$(failureMessage)" --subject "Stage Failure Notification"
    displayName: 'Send Failure Notification'
    condition: failed()
