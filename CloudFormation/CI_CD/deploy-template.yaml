parameters:
- name: stageName
  type: string
- name: stackName
  type: string
- name: parametersFile
  type: string
- name: feedName
  type: string
- name: failureMessage
  type: string
- name: appPort
  type: int # Add this parameter for the application port

jobs:
- job: CheckoutAndCreateInfrastructure
  displayName: 'Checkout and Create Infrastructure for $(stageName)'
  steps:
  - checkout: self # Checkout the code
  - script: |
      echo "Creating Infrastructure for $(stageName)..."
      aws cloudformation create-stack --stack-name $(stackName) \
        --template-body file://CF_templates/templates/Infrastructure.yaml \
        --parameters file://CF_templates/parameters/$(parametersFile)

    displayName: 'Create $(stageName) Infrastructure'

  - script: |
      echo "Waiting for stack creation to complete..."
      aws cloudformation wait stack-create-complete --stack-name $(stackName)
    displayName: 'Wait for Stack Creation'

  - script: |
      echo "Fetching EC2 instance IP address..."
      EC2_IP=$(aws cloudformation describe-stacks --stack-name $(stackName) --query "Stacks[0].Outputs[?OutputKey=='EC2InstancePublicIP'].OutputValue" --output text)
      echo "##vso[task.setvariable variable=EC2_IP]$EC2_IP"
    displayName: 'Get EC2 IP Address'

  - task: DownloadSecureFile@1
    name: downloadPemFile
    inputs:
      secureFile: '$(PEM_FILE_PATH)' # Name of the PEM file in Secure Files

- script: |
    echo "Deploying to $(stageName) Environment..."
    chmod 400 $(downloadPemFile.secureFilePath)

    # Create a directory for the artifacts and navigate to it
    mkdir -p ~/artifacts && cd ~/artifacts

    echo "Downloading opensupports artifact..."
    az artifacts universal download --name opensupports --version 1.0.0 --path . --feed $(feedName)

    echo "Deploying to EC2 instance..."
    scp -i $(downloadPemFile.secureFilePath) -r * ec2-user@$(EC2_IP):/path/to/deployment/directory

    echo "Running installation on the EC2 instance..."
    ssh -i $(downloadPemFile.secureFilePath) ec2-user@$(EC2_IP) << 'ENDSSH'
      # Navigate to the directory where the artifact was copied
      cd /path/to/deployment/directory

      # If the artifact is a zip file, you may need to unzip it
      if [[ -f "opensupports.zip" ]]; then
          unzip opensupports.zip
      fi

      # Run the installation script
      if [[ -f "install.sh" ]]; then
          chmod +x install.sh  # Make sure the installation script is executable
          ./install.sh         # Execute the installation script
      else
          echo "Installation script not found!"
          exit 1
      fi

      # Perform post-deployment checks
      if curl -f http://localhost:$(appPort)/health; then
          echo "Application is running successfully."
      else
          echo "Application failed to start."
          exit 1
      fi

      echo "Deployment completed successfully."
    ENDSSH
  displayName: 'Deploy to $(stageName)'

- script: |
    echo "Sending failure notification if the job fails..."
    aws sns publish --topic-arn $(SNS_TOPIC_ARN) --message "$(failureMessage)" --subject "Stage Failure Notification"
  displayName: 'Send Failure Notification'
  condition: failed()
