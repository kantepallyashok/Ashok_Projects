trigger:
  branches:
    include:
    - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  awsRegion: '<YourAWSRegion>' # e.g., 'us-east-1'
  awsAccountId: '<YourAWSAccountId>' # e.g., '123456789012'
  ecrRepositoryFrontend: 'frontend'
  ecrRepositoryBackend: 'backend'
  imageTag: '$(Build.BuildId)' # Use build ID as image tag
  SNS_TOPIC_ARN: '<YourSNSTopicARN>' # Replace with your SNS topic ARN
  APPROVER_1_EMAIL: '<Approver1Email>' # Email of the first approver
  APPROVER_2_EMAIL: '<Approver2Email>' # Email of the second approver
  TEAM_EMAIL: '<TeamEmail>' # Email of the entire team for final approval

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push Docker Images to AWS ECR'
    steps:
    - task: AWSCLI@1
      inputs:
        awsCredentials: '<YourAWSServiceConnection>' # Azure DevOps service connection for AWS
        regionName: '$(awsRegion)'
        command: 'ecr get-login-password'
      name: GetECRLogin

    - script: |
        echo "$(GetECRLogin.awsCliLoginPassword)" | docker login --username AWS --password-stdin $(awsAccountId).dkr.ecr.$(awsRegion).amazonaws.com
      displayName: 'Login to ECR'

    - task: Docker@2
      displayName: 'Build Frontend Docker Image'
      inputs:
        containerRegistry: '$(awsAccountId).dkr.ecr.$(awsRegion).amazonaws.com'
        repository: '$(ecrRepositoryFrontend)'
        command: 'build'
        Dockerfile: '../frontend/Dockerfile'
        tags: |
          $(imageTag)

    - task: Docker@2
      displayName: 'Build Backend Docker Image'
      inputs:
        containerRegistry: '$(awsAccountId).dkr.ecr.$(awsRegion).amazonaws.com'
        repository: '$(ecrRepositoryBackend)'
        command: 'build'
        Dockerfile: '../backend/Dockerfile'
        tags: |
          $(imageTag)

    - task: Docker@2
      displayName: 'Push Frontend Docker Image to ECR'
      inputs:
        containerRegistry: '$(awsAccountId).dkr.ecr.$(awsRegion).amazonaws.com'
        repository: '$(ecrRepositoryFrontend)'
        command: 'push'
        tags: |
          $(imageTag)

    - task: Docker@2
      displayName: 'Push Backend Docker Image to ECR'
      inputs:
        containerRegistry: '$(awsAccountId).dkr.ecr.$(awsRegion).amazonaws.com'
        repository: '$(ecrRepositoryBackend)'
        command: 'push'
        tags: |
          $(imageTag)

- stage: Deploy
  displayName: 'Deploy Stage'
  jobs:

  - job: DeployToDev
    displayName: 'Deploy to AWS ECS Development'
    steps:
    - template: deploy-template.yaml
      parameters:
        environment: 'Development'
        tfvarsFile: 'parameters-dev.tfvars'

  - job: DeployToStaging
    displayName: 'Deploy to AWS ECS Staging'
    dependsOn: DeployToDev
    condition: succeeded()
    steps:
    - template: deploy-template.yaml
      parameters:
        environment: 'Staging'
        tfvarsFile: 'parameters-staging.tfvars'

  - job: DeployToProd
    displayName: 'Deploy to AWS ECS Production'
    dependsOn: DeployToStaging
    condition: succeeded()

    jobs:
    - job: Approval
      displayName: 'Approval Job'
      steps:
      - script: |
          echo "Sending approval notification to $(APPROVER_1_EMAIL) and $(APPROVER_2_EMAIL)..."
          aws sns publish --topic-arn $(SNS_TOPIC_ARN) --message "Please approve the deployment to Production." --subject "Production Deployment Approval Needed"
        displayName: 'Send Approval Notification to 2 Users'

      - task: ManualValidation@0
        inputs:
          notifyUsers: 'true'
          approvers: '$(APPROVER_1_EMAIL),$(APPROVER_2_EMAIL)' # Initial approvers
          timeout: 60 # Wait for 60 minutes for the first approval
          onTimeout: 'reject'
          message: 'Please approve the deployment to Production.'

      - script: |
          echo "No approvals received. Sending notification to entire team..."
          aws sns publish --topic-arn $(SNS_TOPIC_ARN) --message "No approvals received within 60 minutes. Team, please take action." --subject "Final Production Deployment Approval Needed"
          echo "Waiting for additional 120 minutes for manual approval..."
          sleep 7200  # Wait for another 2 hours
        displayName: 'Notify Team of Approval Delay'
        condition: failed() # Trigger if previous step failed

      - task: ManualValidation@0
        inputs:
          notifyUsers: 'true'
          approvers: '$(TEAM_EMAIL)' # Entire team will get approval permission now
          timeout: 120 # Wait for 2 hours for team approval
          onTimeout: 'reject'
          message: 'Please approve the deployment to Production.'

    - template: deploy-template.yaml
      parameters:
        environment: 'Production'
        tfvarsFile: 'parameters-prod.tfvars'
